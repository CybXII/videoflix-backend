name: Videoflix CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-test-deploy:
    runs-on: ubuntu-latest
    env:
      POSTGRES_USER: ${{ secrets.POSTGRES_USER }}
      POSTGRES_PASSWORD: ${{ secrets.POSTGRES_PASSWORD }}

    steps:
      - name: 📥 Checkout Repository
        uses: actions/checkout@v4

      - name: 🔐 Generate .env file from GitHub Secret
        run: |
          echo "${{ secrets.ENV }}" > .env

      - name: 📁 Prepare deployment files
        run: |
          mkdir -p deploy
          chmod +x backend.entrypoint.sh

          cp backend.Dockerfile backend.entrypoint.sh docker-compose.yml requirements.txt .env manage.py deploy/
          
          # Nur die relevanten Projekt-Ordner übertragen
          rsync -av --exclude '__pycache__' videoflix/ deploy/videoflix/
          rsync -av --exclude '__pycache__' videoflix_app/ deploy/videoflix_app/

      - name: 📤 Upload to VPS
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          port: ${{ secrets.PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "deploy"
          target: "/home/cybxii/videoflix-backend"
          strip_components: 1
          debug: true

      - name: 🐳 Run Docker Compose on VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          envs: POSTGRES_USER,POSTGRES_PASSWORD,DJANGO_SUPERUSER_USERNAME,DJANGO_SUPERUSER_EMAIL,DJANGO_SUPERUSER_PASSWORD
          script: |
            cd /home/cybxii/videoflix-backend

            echo "🚀 Starte Deployment..."
            docker compose down --remove-orphans || true
            docker compose build
            docker compose up -d
            echo "⏳ Warte auf Container-Start..."
            sleep 20

            echo "🔎 Prüfe/erstelle Videoflix-Datenbank..."
            docker exec -i postgres-main psql -U $POSTGRES_USER -d postgres -tAc "SELECT 1 FROM pg_database WHERE datname='videoflix'" | grep -q 1 \
              || docker exec -i postgres-main psql -U $POSTGRES_USER -d postgres -c "CREATE DATABASE videoflix OWNER $POSTGRES_USER;"

            echo "⚙ Prüfe ob Migrationen existieren..."
            if ! docker exec videoflix_backend sh -c "ls videoflix_app/migrations/[0-9]*.py >/dev/null 2>&1"; then
              echo "📦 Keine echten Migrationen gefunden – erstelle neue."
              docker exec videoflix_backend python manage.py makemigrations --noinput
            else
              echo "✅ Echte Migrationen vorhanden – überspringe makemigrations."
            fi

            echo "⚙ Führe Django Management Commands aus..."
            docker exec videoflix_backend python manage.py migrate --noinput
            docker exec videoflix_backend python manage.py collectstatic --noinput

            echo "👤 Superuser prüfen/erstellen..."
            docker exec videoflix_backend python manage.py shell -c "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.filter(username='$DJANGO_SUPERUSER_USERNAME').exists() or User.objects.create_superuser('$DJANGO_SUPERUSER_USERNAME', '$DJANGO_SUPERUSER_EMAIL', '$DJANGO_SUPERUSER_PASSWORD')"
