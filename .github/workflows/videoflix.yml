name: Videoflix CI/CD Pipeline

on:
  push:
    branches: [ "main" ]

jobs:
  build-and-test-deploy:
    runs-on: ubuntu-latest

    steps:
      - name: üì• Checkout Repository
        uses: actions/checkout@v4

      - name: üîê Generate .env file from GitHub Secret
        run: |
          echo "${{ secrets.ENV }}" > .env

      - name: üìÅ Prepare deployment files
        run: |
          mkdir -p deploy
          # Kopiere relevante Konfigurationsdateien
          cp backend.Dockerfile backend.entrypoint.sh docker-compose.yml requirements.txt .env deploy/
          cp manage.py deploy/ 
          
          # Nur die relevanten Projekt-Ordner √ºbertragen
          rsync -av --exclude '__pycache__' videoflix/ deploy/videoflix/
          rsync -av --exclude '__pycache__' videoflix_app/ deploy/videoflix_app/

      - name: üì§ Upload to VPS (Test-Verzeichnis)
        uses: appleboy/scp-action@v0.1.7
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          port: ${{ secrets.PORT }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          source: "deploy"
          target: "/home/videoflix-django-test"
          strip_components: 1
          debug: true

      - name: üê≥ Run Docker Compose on VPS
        uses: appleboy/ssh-action@v1.0.0
        with:
          host: ${{ secrets.HOST }}
          username: ${{ secrets.USERNAME }}
          key: ${{ secrets.SSH_PRIVATE_KEY }}
          port: ${{ secrets.PORT }}
          script: |
            cd /home/videoflix-django-test

            # Compose neu starten
            docker compose down --volumes || true
            docker compose build --no-cache
            docker compose up -d

            # Warten bis Container vollst√§ndig gestartet ist
            echo "‚è≥ Warte auf Container-Start..."
            sleep 30

            # Django Commands im Container ausf√ºhren
            echo "‚öô F√ºhre Django Management Commands aus..."
            docker exec videoflix_test_web python manage.py migrate --noinput
            docker exec videoflix_test_web python manage.py collectstatic --noinput

            # Optional: Superuser automatisch anlegen (einmalig)
            docker exec videoflix_test_web python manage.py shell -c "from django.contrib.auth import get_user_model; User = get_user_model(); User.objects.filter(username='admin').exists() or User.objects.create_superuser('admin', 'admin@example.com', 'adminpass')"
